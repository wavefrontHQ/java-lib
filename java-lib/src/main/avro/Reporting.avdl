// NOTE: talk to panghy before changing this file.
@namespace("wavefront.report")
protocol Reporting {
  enum HistogramType {
    TDIGEST, DOUBLE_TRUNCATE
  }

  record Histogram {
    // Number of milliseconds that samples cover
    int duration;
    // Histogram is a list of sample bins and counts
    HistogramType type;
    array<double> bins;
    array<int> counts;
  }

  record ReportPoint {
    string metric;
    // Milliseconds since 1970
    long timestamp;
    union { double, long, string, Histogram } value;
    string host = "unknown";
    string table = "tsdb";
    map<string> annotations = {};
  }

  record Annotation {
    string key;
    string value;
  }

  record Span {
    // name of the span (expecting low cardinality, e.g. "checkout", "getAlerts")
    string name;
    // uuid of the span
    string spanId;
    // uuid of the trace
    string traceId;
    // start millis of the span
    long startMillis;
    // duration of the span
    long duration;
    // source (host) of the span
    string source = "unknown";
    // the customer of the span
    string customer;
    // annotations (indexed and unindexed).
    array<Annotation> annotations = {};
  }

  record SpanLog {
    // timestamp of the span log entry in micros
    long timestamp;
    map<string> fields = {};
  }

  record SpanLogs {
    string customer;
    // uuid of the trace
    string traceId;
    // uuid of the span
    string spanId;
    // alternative span ID
    union{null, string} spanSecondaryId = null;
    // span log entries
    array<SpanLog> logs;
    // span in line data format, for sampling and filterings
    union{null, string} span = null;
  }

// Collection of spans with the same traceId.
  record Trace {
  // uuid of the trace
    string traceId;
  // the customer of the span
    string customer;
  // spans of the trace.
    array<Span> spans;
  }

  // The parts of a ReportPoint that uniquely identify a timeseries to wavefront.
  record TimeSeries {
    string metric;
    string host = "unknown";
    string table = "tsdb";
    @java-class("java.util.TreeMap") map<string> annotations = {};
  }

  enum SourceOperationType {
    SOURCE_TAG, SOURCE_DESCRIPTION
  }

  enum SourceTagAction {
    ADD, SAVE, DELETE
  }

  record ReportSourceTag {
    SourceOperationType operation;
    SourceTagAction action;
    string source;
    array<string> annotations = {}; // might be empty
  }

  record ReportEvent {
    string name;
    long startTime;
    long endTime;
    map<string> annotations;
    array<string> hosts = [];
    union {null, array<string>} tags = null;
    union {null, map<array<string>>} dimensions = null;
  }
}